import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _objectWithoutProperties from"/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js";import React from"c:\\node_modules\\react\\index.js";import PropTypes from"c:\\node_modules\\prop-types\\index.js";import clsx from"c:\\node_modules\\clsx\\dist\\clsx.m.js";import{refType}from"c:\\node_modules\\@material-ui\\utils\\esm\\index.js";import InputBase from"c:\\node_modules\\@material-ui\\core\\esm\\InputBase\\index.js";import NotchedOutline from"/node_modules/@material-ui/core/esm/OutlinedInput/NotchedOutline.js";import withStyles from"/node_modules/@material-ui/core/esm/styles/withStyles.js";export var styles=function styles(theme){var borderColor="light"===theme.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative",borderRadius:theme.shape.borderRadius,"&:hover $notchedOutline":{borderColor:theme.palette.text.primary},"@media (hover: none)":{"&:hover $notchedOutline":{borderColor:borderColor}},"&$focused $notchedOutline":{borderColor:theme.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:theme.palette.error.main},"&$disabled $notchedOutline":{borderColor:theme.palette.action.disabled}},colorSecondary:{"&$focused $notchedOutline":{borderColor:theme.palette.secondary.main}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},marginDense:{},multiline:{padding:"18.5px 14px","&$marginDense":{paddingTop:10.5,paddingBottom:10.5}},notchedOutline:{borderColor:borderColor},input:{padding:"18.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"light"===theme.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===theme.palette.type?null:"#fff",caretColor:"light"===theme.palette.type?null:"#fff",borderRadius:"inherit"}},inputMarginDense:{paddingTop:10.5,paddingBottom:10.5},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}};var OutlinedInput=React.forwardRef(function OutlinedInput(props,ref){var classes=props.classes,_props$fullWidth=props.fullWidth,fullWidth=void 0!==_props$fullWidth&&_props$fullWidth,_props$inputComponent=props.inputComponent,inputComponent=void 0===_props$inputComponent?"input":_props$inputComponent,label=props.label,_props$labelWidth=props.labelWidth,labelWidth=void 0===_props$labelWidth?0:_props$labelWidth,_props$multiline=props.multiline,multiline=void 0!==_props$multiline&&_props$multiline,notched=props.notched,_props$type=props.type,type=void 0===_props$type?"text":_props$type,other=_objectWithoutProperties(props,["classes","fullWidth","inputComponent","label","labelWidth","multiline","notched","type"]);return React.createElement(InputBase,_extends({renderSuffix:function renderSuffix(state){return React.createElement(NotchedOutline,{className:classes.notchedOutline,label:label,labelWidth:labelWidth,notched:"undefined"==typeof notched?!!(state.startAdornment||state.filled||state.focused):notched})},classes:_extends({},classes,{root:clsx(classes.root,classes.underline),notchedOutline:null}),fullWidth:fullWidth,inputComponent:inputComponent,multiline:multiline,ref:ref,type:type},other))});OutlinedInput.muiName="Input";export default withStyles(styles,{name:"MuiOutlinedInput"})(OutlinedInput);