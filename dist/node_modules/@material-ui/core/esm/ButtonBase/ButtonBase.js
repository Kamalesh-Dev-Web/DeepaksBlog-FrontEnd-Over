import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _objectWithoutProperties from"/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js";import React from"c:\\node_modules\\react\\index.js";import PropTypes from"c:\\node_modules\\prop-types\\index.js";import ReactDOM from"c:\\node_modules\\react-dom\\index.js";import clsx from"c:\\node_modules\\clsx\\dist\\clsx.m.js";import{elementTypeAcceptingRef,refType}from"c:\\node_modules\\@material-ui\\utils\\esm\\index.js";import useForkRef from"/node_modules/@material-ui/core/esm/utils/useForkRef.js";import useEventCallback from"/node_modules/@material-ui/core/esm/utils/useEventCallback.js";import deprecatedPropType from"/node_modules/@material-ui/core/esm/utils/deprecatedPropType.js";import withStyles from"/node_modules/@material-ui/core/esm/styles/withStyles.js";import useIsFocusVisible from"/node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js";import TouchRipple from"/node_modules/@material-ui/core/esm/ButtonBase/TouchRipple.js";export var styles={root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}};var ButtonBase=React.forwardRef(function ButtonBase(props,ref){function getButtonNode(){return ReactDOM.findDOMNode(buttonRef.current)}function useRippleHandler(rippleAction,eventCallback){var skipRippleAction=2<arguments.length&&void 0!==arguments[2]?arguments[2]:disableTouchRipple;return useEventCallback(function(event){return eventCallback&&eventCallback(event),!skipRippleAction&&rippleRef.current&&rippleRef.current[rippleAction](event),!0})}var action=props.action,buttonRefProp=props.buttonRef,_props$centerRipple=props.centerRipple,centerRipple=void 0!==_props$centerRipple&&_props$centerRipple,children=props.children,classes=props.classes,className=props.className,_props$component=props.component,component=void 0===_props$component?"button":_props$component,_props$disabled=props.disabled,disabled=void 0!==_props$disabled&&_props$disabled,_props$disableRipple=props.disableRipple,disableRipple=void 0!==_props$disableRipple&&_props$disableRipple,_props$disableTouchRi=props.disableTouchRipple,disableTouchRipple=void 0!==_props$disableTouchRi&&_props$disableTouchRi,_props$focusRipple=props.focusRipple,focusRipple=void 0!==_props$focusRipple&&_props$focusRipple,focusVisibleClassName=props.focusVisibleClassName,onBlur=props.onBlur,onClick=props.onClick,onFocus=props.onFocus,onFocusVisible=props.onFocusVisible,onKeyDown=props.onKeyDown,onKeyUp=props.onKeyUp,onMouseDown=props.onMouseDown,onMouseLeave=props.onMouseLeave,onMouseUp=props.onMouseUp,onTouchEnd=props.onTouchEnd,onTouchMove=props.onTouchMove,onTouchStart=props.onTouchStart,onDragLeave=props.onDragLeave,_props$tabIndex=props.tabIndex,tabIndex=void 0===_props$tabIndex?0:_props$tabIndex,TouchRippleProps=props.TouchRippleProps,_props$type=props.type,type=void 0===_props$type?"button":_props$type,other=_objectWithoutProperties(props,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),buttonRef=React.useRef(null),rippleRef=React.useRef(null),_React$useState=React.useState(!1),focusVisible=_React$useState[0],setFocusVisible=_React$useState[1];disabled&&focusVisible&&setFocusVisible(!1);var _useIsFocusVisible=useIsFocusVisible(),isFocusVisible=_useIsFocusVisible.isFocusVisible,onBlurVisible=_useIsFocusVisible.onBlurVisible,focusVisibleRef=_useIsFocusVisible.ref;React.useImperativeHandle(action,function(){return{focusVisible:function focusVisible(){setFocusVisible(!0),buttonRef.current.focus()}}},[]),React.useEffect(function(){focusVisible&&focusRipple&&!disableRipple&&rippleRef.current.pulsate()},[disableRipple,focusRipple,focusVisible]);var handleMouseDown=useRippleHandler("start",onMouseDown),handleDragLeave=useRippleHandler("stop",onDragLeave),handleMouseUp=useRippleHandler("stop",onMouseUp),handleMouseLeave=useRippleHandler("stop",function(event){focusVisible&&event.preventDefault(),onMouseLeave&&onMouseLeave(event)}),handleTouchStart=useRippleHandler("start",onTouchStart),handleTouchEnd=useRippleHandler("stop",onTouchEnd),handleTouchMove=useRippleHandler("stop",onTouchMove),handleBlur=useRippleHandler("stop",function(event){focusVisible&&(onBlurVisible(event),setFocusVisible(!1)),onBlur&&onBlur(event)},!1),handleFocus=useEventCallback(function(event){buttonRef.current||(buttonRef.current=event.currentTarget),isFocusVisible(event)&&(setFocusVisible(!0),onFocusVisible&&onFocusVisible(event)),onFocus&&onFocus(event)}),isNonNativeButton=function isNonNativeButton(){var button=getButtonNode();return component&&"button"!==component&&!("A"===button.tagName&&button.href)},keydownRef=React.useRef(!1),handleKeyDown=useEventCallback(function(event){focusRipple&&!keydownRef.current&&focusVisible&&rippleRef.current&&" "===event.key&&(keydownRef.current=!0,event.persist(),rippleRef.current.stop(event,function(){rippleRef.current.start(event)})),event.target===event.currentTarget&&isNonNativeButton()&&" "===event.key&&event.preventDefault(),onKeyDown&&onKeyDown(event),event.target===event.currentTarget&&isNonNativeButton()&&"Enter"===event.key&&!disabled&&(event.preventDefault(),onClick&&onClick(event))}),handleKeyUp=useEventCallback(function(event){focusRipple&&" "===event.key&&rippleRef.current&&focusVisible&&!event.defaultPrevented&&(keydownRef.current=!1,event.persist(),rippleRef.current.stop(event,function(){rippleRef.current.pulsate(event)})),onKeyUp&&onKeyUp(event),onClick&&event.target===event.currentTarget&&isNonNativeButton()&&" "===event.key&&!event.defaultPrevented&&onClick(event)}),ComponentProp=component;"button"===ComponentProp&&other.href&&(ComponentProp="a");var buttonProps={};"button"===ComponentProp?(buttonProps.type=type,buttonProps.disabled=disabled):(("a"!==ComponentProp||!other.href)&&(buttonProps.role="button"),buttonProps["aria-disabled"]=disabled);var handleUserRef=useForkRef(buttonRefProp,ref),handleOwnRef=useForkRef(focusVisibleRef,buttonRef),handleRef=useForkRef(handleUserRef,handleOwnRef),_React$useState2=React.useState(!1),mountedState=_React$useState2[0],setMountedState=_React$useState2[1];return React.useEffect(function(){setMountedState(!0)},[]),React.createElement(ComponentProp,_extends({className:clsx(classes.root,className,focusVisible&&[classes.focusVisible,focusVisibleClassName],disabled&&classes.disabled),onBlur:handleBlur,onClick:onClick,onFocus:handleFocus,onKeyDown:handleKeyDown,onKeyUp:handleKeyUp,onMouseDown:handleMouseDown,onMouseLeave:handleMouseLeave,onMouseUp:handleMouseUp,onDragLeave:handleDragLeave,onTouchEnd:handleTouchEnd,onTouchMove:handleTouchMove,onTouchStart:handleTouchStart,ref:handleRef,tabIndex:disabled?-1:tabIndex},buttonProps,other),children,!mountedState||disableRipple||disabled?null:React.createElement(TouchRipple,_extends({ref:rippleRef,center:centerRipple},TouchRippleProps)))});void 0;export default withStyles(styles,{name:"MuiButtonBase"})(ButtonBase);