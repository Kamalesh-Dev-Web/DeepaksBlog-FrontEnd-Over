import"/node_modules/core-js/modules/es.array.index-of.js";import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/es.number.to-fixed.js";import"/node_modules/core-js/modules/es.regexp.constructor.js";import"/node_modules/core-js/modules/es.regexp.to-string.js";import"/node_modules/core-js/modules/es.string.match.js";import"/node_modules/core-js/modules/es.string.split.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import{formatMuiErrorMessage as _formatMuiErrorMessage}from"c:\\node_modules\\@material-ui\\utils\\esm\\index.js";function clamp(value){var min=1<arguments.length&&arguments[1]!==void 0?arguments[1]:0,max=2<arguments.length&&arguments[2]!==void 0?arguments[2]:1;return Math.min(Math.max(min,value),max)}export function hexToRgb(color){color=color.substr(1);var re=new RegExp(".{1,".concat(6<=color.length?2:1,"}"),"g"),colors=color.match(re);return colors&&1===colors[0].length&&(colors=colors.map(function(n){return n+n})),colors?"rgb".concat(4===colors.length?"a":"","(").concat(colors.map(function(n,index){return 3>index?parseInt(n,16):Math.round(1e3*(parseInt(n,16)/255))/1e3}).join(", "),")"):""}function intToHex(int){var hex=int.toString(16);return 1===hex.length?"0".concat(hex):hex}export function rgbToHex(color){if(0===color.indexOf("#"))return color;var _decomposeColor=decomposeColor(color),values=_decomposeColor.values;return"#".concat(values.map(function(n){return intToHex(n)}).join(""))}export function hslToRgb(color){color=decomposeColor(color);var _color=color,values=_color.values,h=values[0],s=values[1]/100,l=values[2]/100,a=s*Math.min(l,1-l),f=function f(n){var k=1<arguments.length&&void 0!==arguments[1]?arguments[1]:(n+h/30)%12;return l-a*Math.max(Math.min(k-3,9-k,1),-1)},type="rgb",rgb=[Math.round(255*f(0)),Math.round(255*f(8)),Math.round(255*f(4))];return"hsla"===color.type&&(type+="a",rgb.push(values[3])),recomposeColor({type:type,values:rgb})}export function decomposeColor(color){if(color.type)return color;if("#"===color.charAt(0))return decomposeColor(hexToRgb(color));var marker=color.indexOf("("),type=color.substring(0,marker);if(-1===["rgb","rgba","hsl","hsla"].indexOf(type))throw new Error(_formatMuiErrorMessage(3,color));var values=color.substring(marker+1,color.length-1).split(",");return values=values.map(function(value){return parseFloat(value)}),{type:type,values:values}}export function recomposeColor(color){var type=color.type,values=color.values;return-1===type.indexOf("rgb")?-1!==type.indexOf("hsl")&&(values[1]="".concat(values[1],"%"),values[2]="".concat(values[2],"%")):values=values.map(function(n,i){return 3>i?parseInt(n,10):n}),"".concat(type,"(").concat(values.join(", "),")")}export function getContrastRatio(foreground,background){var lumA=getLuminance(foreground),lumB=getLuminance(background);return(Math.max(lumA,lumB)+.05)/(Math.min(lumA,lumB)+.05)}export function getLuminance(color){color=decomposeColor(color);var rgb="hsl"===color.type?decomposeColor(hslToRgb(color)).values:color.values;return rgb=rgb.map(function(val){return val/=255,.03928>=val?val/12.92:Math.pow((val+.055)/1.055,2.4)}),+(.2126*rgb[0]+.7152*rgb[1]+.0722*rgb[2]).toFixed(3)}export function emphasize(color){var coefficient=1<arguments.length&&arguments[1]!==void 0?arguments[1]:.15;return .5<getLuminance(color)?darken(color,coefficient):lighten(color,coefficient)}var warnedOnce=!1;export function fade(color,value){return alpha(color,value)}export function alpha(color,value){return color=decomposeColor(color),value=clamp(value),("rgb"===color.type||"hsl"===color.type)&&(color.type+="a"),color.values[3]=value,recomposeColor(color)}export function darken(color,coefficient){if(color=decomposeColor(color),coefficient=clamp(coefficient),-1!==color.type.indexOf("hsl"))color.values[2]*=1-coefficient;else if(-1!==color.type.indexOf("rgb"))for(var i=0;3>i;i+=1)color.values[i]*=1-coefficient;return recomposeColor(color)}export function lighten(color,coefficient){if(color=decomposeColor(color),coefficient=clamp(coefficient),-1!==color.type.indexOf("hsl"))color.values[2]+=(100-color.values[2])*coefficient;else if(-1!==color.type.indexOf("rgb"))for(var i=0;3>i;i+=1)color.values[i]+=(255-color.values[i])*coefficient;return recomposeColor(color)}