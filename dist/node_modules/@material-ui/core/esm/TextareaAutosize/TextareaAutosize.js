import"/node_modules/core-js/modules/es.array.slice.js";import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _objectWithoutProperties from"/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js";import React from"c:\\node_modules\\react\\index.js";import PropTypes from"c:\\node_modules\\prop-types\\index.js";import debounce from"/node_modules/@material-ui/core/esm/utils/debounce.js";import useForkRef from"/node_modules/@material-ui/core/esm/utils/useForkRef.js";import deprecatedPropType from"/node_modules/@material-ui/core/esm/utils/deprecatedPropType.js";function getStyleValue(computedStyle,property){return parseInt(computedStyle[property],10)||0}var useEnhancedEffect=React.useLayoutEffect,styles={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}},TextareaAutosize=React.forwardRef(function TextareaAutosize(props,ref){var onChange=props.onChange,rows=props.rows,rowsMax=props.rowsMax,rowsMinProp=props.rowsMin,maxRowsProp=props.maxRows,_props$minRows=props.minRows,minRowsProp=void 0===_props$minRows?1:_props$minRows,style=props.style,value=props.value,other=_objectWithoutProperties(props,["onChange","rows","rowsMax","rowsMin","maxRows","minRows","style","value"]),maxRows=maxRowsProp||rowsMax,minRows=rows||rowsMinProp||minRowsProp,_React$useRef=React.useRef(null!=value),isControlled=_React$useRef.current,inputRef=React.useRef(null),handleRef=useForkRef(ref,inputRef),shadowRef=React.useRef(null),renders=React.useRef(0),_React$useState=React.useState({}),state=_React$useState[0],setState=_React$useState[1],syncHeight=React.useCallback(function(){var input=inputRef.current,computedStyle=window.getComputedStyle(input),inputShallow=shadowRef.current;inputShallow.style.width=computedStyle.width,inputShallow.value=input.value||props.placeholder||"x","\n"===inputShallow.value.slice(-1)&&(inputShallow.value+=" ");var boxSizing=computedStyle["box-sizing"],padding=getStyleValue(computedStyle,"padding-bottom")+getStyleValue(computedStyle,"padding-top"),border=getStyleValue(computedStyle,"border-bottom-width")+getStyleValue(computedStyle,"border-top-width"),innerHeight=inputShallow.scrollHeight-padding;inputShallow.value="x";var singleRowHeight=inputShallow.scrollHeight-padding,outerHeight=innerHeight;minRows&&(outerHeight=Math.max(+minRows*singleRowHeight,outerHeight)),maxRows&&(outerHeight=Math.min(+maxRows*singleRowHeight,outerHeight)),outerHeight=Math.max(outerHeight,singleRowHeight);var outerHeightStyle=outerHeight+("border-box"===boxSizing?padding+border:0),overflow=1>=Math.abs(outerHeight-innerHeight);setState(function(prevState){return 20>renders.current&&(0<outerHeightStyle&&1<Math.abs((prevState.outerHeightStyle||0)-outerHeightStyle)||prevState.overflow!==overflow)?(renders.current+=1,{overflow:overflow,outerHeightStyle:outerHeightStyle}):prevState})},[maxRows,minRows,props.placeholder]);return React.useEffect(function(){var handleResize=debounce(function(){renders.current=0,syncHeight()});return window.addEventListener("resize",handleResize),function(){handleResize.clear(),window.removeEventListener("resize",handleResize)}},[syncHeight]),useEnhancedEffect(function(){syncHeight()}),React.useEffect(function(){renders.current=0},[value]),React.createElement(React.Fragment,null,React.createElement("textarea",_extends({value:value,onChange:function handleChange(event){renders.current=0,isControlled||syncHeight(),onChange&&onChange(event)},ref:handleRef,rows:minRows,style:_extends({height:state.outerHeightStyle,overflow:state.overflow?"hidden":null},style)},other)),React.createElement("textarea",{"aria-hidden":!0,className:props.className,readOnly:!0,ref:shadowRef,tabIndex:-1,style:_extends({},styles.shadow,style)}))});void 0;export default TextareaAutosize;