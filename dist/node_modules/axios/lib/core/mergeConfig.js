'use strict';import"/node_modules/core-js/modules/es.array.index-of.js";import"/node_modules/core-js/modules/es.array.slice.js";import utils from"/node_modules/axios/lib/utils.js";const _ref={exports:{}};(function(module,exports){module.exports=function mergeConfig(config1,config2){function getMergedValue(target,source){return utils.isPlainObject(target)&&utils.isPlainObject(source)?utils.merge(target,source):utils.isPlainObject(source)?utils.merge({},source):utils.isArray(source)?source.slice():source}function mergeDeepProperties(prop){utils.isUndefined(config2[prop])?!utils.isUndefined(config1[prop])&&(config[prop]=getMergedValue(void 0,config1[prop])):config[prop]=getMergedValue(config1[prop],config2[prop])}config2=config2||{};var config={},valueFromConfig2Keys=["url","method","data"],mergeDeepPropertiesKeys=["headers","auth","proxy","params"],defaultToConfig2Keys=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],directMergeKeys=["validateStatus"];utils.forEach(valueFromConfig2Keys,function valueFromConfig2(prop){utils.isUndefined(config2[prop])||(config[prop]=getMergedValue(void 0,config2[prop]))}),utils.forEach(mergeDeepPropertiesKeys,mergeDeepProperties),utils.forEach(defaultToConfig2Keys,function defaultToConfig2(prop){utils.isUndefined(config2[prop])?!utils.isUndefined(config1[prop])&&(config[prop]=getMergedValue(void 0,config1[prop])):config[prop]=getMergedValue(void 0,config2[prop])}),utils.forEach(directMergeKeys,function merge(prop){prop in config2?config[prop]=getMergedValue(config1[prop],config2[prop]):prop in config1&&(config[prop]=getMergedValue(void 0,config1[prop]))});var axiosKeys=valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys),otherKeys=Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key){return-1===axiosKeys.indexOf(key)});return utils.forEach(otherKeys,mergeDeepProperties),config}})(_ref,_ref.exports);export default _ref.exports;