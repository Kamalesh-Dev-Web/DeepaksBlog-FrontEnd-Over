import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/es.array.reduce.js";import"/node_modules/core-js/modules/esnext.set.add-all.js";import"/node_modules/core-js/modules/esnext.set.delete-all.js";import"/node_modules/core-js/modules/esnext.set.difference.js";import"/node_modules/core-js/modules/esnext.set.every.js";import"/node_modules/core-js/modules/esnext.set.filter.js";import"/node_modules/core-js/modules/esnext.set.find.js";import"/node_modules/core-js/modules/esnext.set.intersection.js";import"/node_modules/core-js/modules/esnext.set.is-disjoint-from.js";import"/node_modules/core-js/modules/esnext.set.is-subset-of.js";import"/node_modules/core-js/modules/esnext.set.is-superset-of.js";import"/node_modules/core-js/modules/esnext.set.join.js";import"/node_modules/core-js/modules/esnext.set.map.js";import"/node_modules/core-js/modules/esnext.set.reduce.js";import"/node_modules/core-js/modules/esnext.set.some.js";import"/node_modules/core-js/modules/esnext.set.symmetric-difference.js";import"/node_modules/core-js/modules/esnext.set.union.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import merge from"/node_modules/@mui/system/esm/merge.js";import getThemeValue,{propToStyleFunction}from"/node_modules/@mui/system/esm/getThemeValue.js";import{handleBreakpoints,createEmptyBreakpointObject,removeUnusedBreakpoints}from"/node_modules/@mui/system/esm/breakpoints.js";function objectsHaveSameKeys(...objects){const allKeys=objects.reduce((keys,object)=>keys.concat(Object.keys(object)),[]),union=new Set(allKeys);return objects.every(object=>union.size===Object.keys(object).length)}function callIfFn(maybeFn,arg){return"function"==typeof maybeFn?maybeFn(arg):maybeFn}function styleFunctionSx(props){const{sx:styles,theme={}}=props||{};if(!styles)return null;if("function"==typeof styles)return styles(theme);if("object"!=typeof styles)return styles;const emptyBreakpoints=createEmptyBreakpointObject(theme.breakpoints),breakpointsKeys=Object.keys(emptyBreakpoints);let css=emptyBreakpoints;return Object.keys(styles).forEach(styleKey=>{const value=callIfFn(styles[styleKey],theme);if("object"!=typeof value)css=merge(css,getThemeValue(styleKey,value,theme));else if(propToStyleFunction[styleKey])css=merge(css,getThemeValue(styleKey,value,theme));else{const breakpointsValues=handleBreakpoints({theme},value,x=>({[styleKey]:x}));objectsHaveSameKeys(breakpointsValues,value)?css[styleKey]=styleFunctionSx({sx:value,theme}):css=merge(css,breakpointsValues)}}),removeUnusedBreakpoints(breakpointsKeys,css)}styleFunctionSx.filterProps=["sx"];export default styleFunctionSx;