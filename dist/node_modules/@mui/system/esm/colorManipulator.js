import"/node_modules/core-js/modules/es.array.index-of.js";import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/es.number.to-fixed.js";import"/node_modules/core-js/modules/es.regexp.constructor.js";import"/node_modules/core-js/modules/es.regexp.to-string.js";import"/node_modules/core-js/modules/es.string.match.js";import"/node_modules/core-js/modules/es.string.split.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import{formatMuiErrorMessage as _formatMuiErrorMessage}from"c:\\node_modules\\@mui\\utils\\esm\\index.js";function clamp(value,min=0,max=1){return Math.min(Math.max(min,value),max)}export function hexToRgb(color){color=color.substr(1);const re=new RegExp(`.{1,${6<=color.length?2:1}}`,"g");let colors=color.match(re);return colors&&1===colors[0].length&&(colors=colors.map(n=>n+n)),colors?`rgb${4===colors.length?"a":""}(${colors.map((n,index)=>3>index?parseInt(n,16):Math.round(1e3*(parseInt(n,16)/255))/1e3).join(", ")})`:""}function intToHex(int){const hex=int.toString(16);return 1===hex.length?`0${hex}`:hex}export function decomposeColor(color){if(color.type)return color;if("#"===color.charAt(0))return decomposeColor(hexToRgb(color));const marker=color.indexOf("("),type=color.substring(0,marker);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(type))throw new Error(_formatMuiErrorMessage(9,color));let colorSpace,values=color.substring(marker+1,color.length-1);if("color"!==type)values=values.split(",");else if(values=values.split(" "),colorSpace=values.shift(),4===values.length&&"/"===values[3].charAt(0)&&(values[3]=values[3].substr(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(colorSpace))throw new Error(_formatMuiErrorMessage(10,colorSpace));return values=values.map(value=>parseFloat(value)),{type,values,colorSpace}}export function recomposeColor(color){const{type,colorSpace}=color;let{values}=color;return-1===type.indexOf("rgb")?-1!==type.indexOf("hsl")&&(values[1]=`${values[1]}%`,values[2]=`${values[2]}%`):values=values.map((n,i)=>3>i?parseInt(n,10):n),values=-1===type.indexOf("color")?`${values.join(", ")}`:`${colorSpace} ${values.join(" ")}`,`${type}(${values})`}export function rgbToHex(color){if(0===color.indexOf("#"))return color;const{values}=decomposeColor(color);return`#${values.map((n,i)=>intToHex(3===i?Math.round(255*n):n)).join("")}`}export function hslToRgb(color){color=decomposeColor(color);const{values}=color,h=values[0],s=values[1]/100,l=values[2]/100,a=s*Math.min(l,1-l),f=(n,k=(n+h/30)%12)=>l-a*Math.max(Math.min(k-3,9-k,1),-1);let type="rgb";const rgb=[Math.round(255*f(0)),Math.round(255*f(8)),Math.round(255*f(4))];return"hsla"===color.type&&(type+="a",rgb.push(values[3])),recomposeColor({type,values:rgb})}export function getLuminance(color){color=decomposeColor(color);let rgb="hsl"===color.type?decomposeColor(hslToRgb(color)).values:color.values;return rgb=rgb.map(val=>("color"!==color.type&&(val/=255),.03928>=val?val/12.92:((val+.055)/1.055)**2.4)),+(.2126*rgb[0]+.7152*rgb[1]+.0722*rgb[2]).toFixed(3)}export function getContrastRatio(foreground,background){const lumA=getLuminance(foreground),lumB=getLuminance(background);return(Math.max(lumA,lumB)+.05)/(Math.min(lumA,lumB)+.05)}export function alpha(color,value){return color=decomposeColor(color),value=clamp(value),("rgb"===color.type||"hsl"===color.type)&&(color.type+="a"),color.values[3]="color"===color.type?`/${value}`:value,recomposeColor(color)}export function darken(color,coefficient){if(color=decomposeColor(color),coefficient=clamp(coefficient),-1!==color.type.indexOf("hsl"))color.values[2]*=1-coefficient;else if(-1!==color.type.indexOf("rgb")||-1!==color.type.indexOf("color"))for(let i=0;3>i;i+=1)color.values[i]*=1-coefficient;return recomposeColor(color)}export function lighten(color,coefficient){if(color=decomposeColor(color),coefficient=clamp(coefficient),-1!==color.type.indexOf("hsl"))color.values[2]+=(100-color.values[2])*coefficient;else if(-1!==color.type.indexOf("rgb"))for(let i=0;3>i;i+=1)color.values[i]+=(255-color.values[i])*coefficient;else if(-1!==color.type.indexOf("color"))for(let i=0;3>i;i+=1)color.values[i]+=(1-color.values[i])*coefficient;return recomposeColor(color)}export function emphasize(color,coefficient=.15){return .5<getLuminance(color)?darken(color,coefficient):lighten(color,coefficient)}