import"/node_modules/core-js/modules/es.number.to-fixed.js";import"/node_modules/core-js/modules/es.string.match.js";export function isUnitless(value){return(parseFloat(value)+"").length===(value+"").length}export function getUnit(input){return(input+"").match(/[\d.\-+]*\s*(.*)/)[1]||""}export function toUnitless(length){return parseFloat(length)}export function convertLength(baseFontSize){return(length,toUnit)=>{const fromUnit=getUnit(length);if(fromUnit===toUnit)return length;let pxLength=toUnitless(length);"px"!==fromUnit&&("em"===fromUnit?pxLength=toUnitless(length)*toUnitless(baseFontSize):"rem"===fromUnit&&(pxLength=toUnitless(length)*toUnitless(baseFontSize)));let outputLength=pxLength;if("px"!==toUnit)if("em"===toUnit)outputLength=pxLength/toUnitless(baseFontSize);else if("rem"===toUnit)outputLength=pxLength/toUnitless(baseFontSize);else return length;return parseFloat(outputLength.toFixed(5))+toUnit}}export function alignProperty({size,grid}){const sizeBelow=size-size%grid,sizeAbove=sizeBelow+grid;return size-sizeBelow<sizeAbove-size?sizeBelow:sizeAbove}export function fontGrid({lineHeight,pixels,htmlFontSize}){return pixels/(lineHeight*htmlFontSize)}export function responsiveProperty({cssProperty,min,max,unit="rem",breakpoints=[600,900,1200],transform=null}){const output={[cssProperty]:`${min}${unit}`},factor=(max-min)/breakpoints[breakpoints.length-1];return breakpoints.forEach(breakpoint=>{let value=min+factor*breakpoint;null!==transform&&(value=transform(value)),output[`@media (min-width:${breakpoint}px)`]={[cssProperty]:`${Math.round(1e4*value)/1e4}${unit}`}}),output}