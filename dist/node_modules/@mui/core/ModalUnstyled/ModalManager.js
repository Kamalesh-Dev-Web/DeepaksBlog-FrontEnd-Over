import"/node_modules/core-js/modules/es.array.index-of.js";import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/es.array.splice.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import{unstable_ownerWindow as ownerWindow,unstable_ownerDocument as ownerDocument,unstable_getScrollbarSize as getScrollbarSize}from"c:\\node_modules\\@mui\\utils\\esm\\index.js";function isOverflowing(container){const doc=ownerDocument(container);return doc.body===container?ownerWindow(container).innerWidth>doc.documentElement.clientWidth:container.scrollHeight>container.clientHeight}export function ariaHidden(element,show){show?element.setAttribute("aria-hidden","true"):element.removeAttribute("aria-hidden")}function getPaddingRight(element){return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight,10)||0}function ariaHiddenSiblings(container,mountElement,currentElement,elementsToExclude=[],show){const blacklist=[mountElement,currentElement,...elementsToExclude],blacklistTagNames=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(container.children,element=>{-1===blacklist.indexOf(element)&&-1===blacklistTagNames.indexOf(element.tagName)&&ariaHidden(element,show)})}function findIndexOf(items,callback){let idx=-1;return items.some((item,index)=>!!callback(item)&&(idx=index,!0)),idx}function handleContainer(containerInfo,props){const restoreStyle=[],container=containerInfo.container;if(!props.disableScrollLock){if(isOverflowing(container)){const scrollbarSize=getScrollbarSize(ownerDocument(container));restoreStyle.push({value:container.style.paddingRight,property:"padding-right",el:container}),container.style.paddingRight=`${getPaddingRight(container)+scrollbarSize}px`;const fixedElements=ownerDocument(container).querySelectorAll(".mui-fixed");[].forEach.call(fixedElements,element=>{restoreStyle.push({value:element.style.paddingRight,property:"padding-right",el:element}),element.style.paddingRight=`${getPaddingRight(element)+scrollbarSize}px`})}const parent=container.parentElement,containerWindow=ownerWindow(container),scrollContainer="HTML"===(null==parent?void 0:parent.nodeName)&&"scroll"===containerWindow.getComputedStyle(parent).overflowY?parent:container;restoreStyle.push({value:scrollContainer.style.overflow,property:"overflow",el:scrollContainer},{value:scrollContainer.style.overflowX,property:"overflow-x",el:scrollContainer},{value:scrollContainer.style.overflowY,property:"overflow-y",el:scrollContainer}),scrollContainer.style.overflow="hidden"}return()=>{restoreStyle.forEach(({value,el,property})=>{value?el.style.setProperty(property,value):el.style.removeProperty(property)})}}function getHiddenSiblings(container){const hiddenSiblings=[];return[].forEach.call(container.children,element=>{"true"===element.getAttribute("aria-hidden")&&hiddenSiblings.push(element)}),hiddenSiblings}export default class ModalManager{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(modal,container){let modalIndex=this.modals.indexOf(modal);if(-1!==modalIndex)return modalIndex;modalIndex=this.modals.length,this.modals.push(modal),modal.modalRef&&ariaHidden(modal.modalRef,!1);const hiddenSiblings=getHiddenSiblings(container);ariaHiddenSiblings(container,modal.mount,modal.modalRef,hiddenSiblings,!0);const containerIndex=findIndexOf(this.containers,item=>item.container===container);return-1===containerIndex?(this.containers.push({modals:[modal],container,restore:null,hiddenSiblings}),modalIndex):(this.containers[containerIndex].modals.push(modal),modalIndex)}mount(modal,props){const containerIndex=findIndexOf(this.containers,item=>-1!==item.modals.indexOf(modal)),containerInfo=this.containers[containerIndex];containerInfo.restore||(containerInfo.restore=handleContainer(containerInfo,props))}remove(modal){const modalIndex=this.modals.indexOf(modal);if(-1===modalIndex)return modalIndex;const containerIndex=findIndexOf(this.containers,item=>-1!==item.modals.indexOf(modal)),containerInfo=this.containers[containerIndex];if(containerInfo.modals.splice(containerInfo.modals.indexOf(modal),1),this.modals.splice(modalIndex,1),0===containerInfo.modals.length)containerInfo.restore&&containerInfo.restore(),modal.modalRef&&ariaHidden(modal.modalRef,!0),ariaHiddenSiblings(containerInfo.container,modal.mount,modal.modalRef,containerInfo.hiddenSiblings,!1),this.containers.splice(containerIndex,1);else{const nextTop=containerInfo.modals[containerInfo.modals.length-1];nextTop.modalRef&&ariaHidden(nextTop.modalRef,!1)}return modalIndex}isTopModal(modal){return 0<this.modals.length&&this.modals[this.modals.length-1]===modal}}