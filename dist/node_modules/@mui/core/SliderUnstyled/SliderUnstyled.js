import"/node_modules/core-js/modules/es.array.index-of.js";import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/es.array.reduce.js";import"/node_modules/core-js/modules/es.array.slice.js";import"/node_modules/core-js/modules/es.array.sort.js";import"/node_modules/core-js/modules/es.number.to-fixed.js";import"/node_modules/core-js/modules/es.regexp.to-string.js";import"/node_modules/core-js/modules/es.string.split.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import _objectWithoutPropertiesLoose from"/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js";const _excluded=["aria-label","aria-labelledby","aria-valuetext","className","component","classes","defaultValue","disableSwap","disabled","getAriaLabel","getAriaValueText","marks","max","min","name","onChange","onChangeCommitted","onMouseDown","orientation","scale","step","tabIndex","track","value","valueLabelDisplay","valueLabelFormat","isRtl","components","componentsProps"];import React from"c:\\node_modules\\react\\index.js";import PropTypes from"c:\\node_modules\\prop-types\\index.js";import clsx from"c:\\node_modules\\clsx\\dist\\clsx.m.js";import{chainPropTypes,unstable_useIsFocusVisible as useIsFocusVisible,unstable_useEnhancedEffect as useEnhancedEffect,unstable_ownerDocument as ownerDocument,unstable_useEventCallback as useEventCallback,unstable_useForkRef as useForkRef,unstable_useControlled as useControlled,visuallyHidden}from"c:\\node_modules\\@mui\\utils\\esm\\index.js";import isHostComponent from"/node_modules/@mui/core/utils/isHostComponent.js";import composeClasses from"c:\\node_modules\\@mui\\core\\composeClasses\\index.js";import{getSliderUtilityClass}from"/node_modules/@mui/core/SliderUnstyled/sliderUnstyledClasses.js";import SliderValueLabelUnstyled from"/node_modules/@mui/core/SliderUnstyled/SliderValueLabelUnstyled.js";import{jsx as _jsx}from"/node_modules/react/jsx-runtime.js";import{jsxs as _jsxs}from"/node_modules/react/jsx-runtime.js";const INTENTIONAL_DRAG_COUNT_THRESHOLD=2;function asc(a,b){return a-b}function clamp(value,min,max){return null==value?min:Math.min(Math.max(min,value),max)}function findClosest(values,currentValue){const{index:closestIndex}=values.reduce((acc,value,index)=>{const distance=Math.abs(currentValue-value);return null===acc||distance<acc.distance||distance===acc.distance?{distance,index}:acc},null);return closestIndex}function trackFinger(event,touchId){if(touchId.current!==void 0&&event.changedTouches){for(let i=0;i<event.changedTouches.length;i+=1){const touch=event.changedTouches[i];if(touch.identifier===touchId.current)return{x:touch.clientX,y:touch.clientY}}return!1}return{x:event.clientX,y:event.clientY}}function valueToPercent(value,min,max){return 100*(value-min)/(max-min)}function percentToValue(percent,min,max){return(max-min)*percent+min}function getDecimalPrecision(num){if(1>Math.abs(num)){const parts=num.toExponential().split("e-"),matissaDecimalPart=parts[0].split(".")[1];return(matissaDecimalPart?matissaDecimalPart.length:0)+parseInt(parts[1],10)}const decimalPart=num.toString().split(".")[1];return decimalPart?decimalPart.length:0}function roundValueToStep(value,step,min){const nearest=Math.round((value-min)/step)*step+min;return+nearest.toFixed(getDecimalPrecision(step))}function setValueIndex({values,newValue,index}){const output=values.slice();return output[index]=newValue,output.sort(asc)}function focusThumb({sliderRef,activeIndex,setActive}){const doc=ownerDocument(sliderRef.current);sliderRef.current.contains(doc.activeElement)&&+doc.activeElement.getAttribute("data-index")===activeIndex||sliderRef.current.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus(),setActive&&setActive(activeIndex)}const axisProps={horizontal:{offset:percent=>({left:`${percent}%`}),leap:percent=>({width:`${percent}%`})},"horizontal-reverse":{offset:percent=>({right:`${percent}%`}),leap:percent=>({width:`${percent}%`})},vertical:{offset:percent=>({bottom:`${percent}%`}),leap:percent=>({height:`${percent}%`})}},Identity=x=>x;let cachedSupportsTouchActionNone;function doesSupportTouchActionNone(){return void 0===cachedSupportsTouchActionNone&&("undefined"!=typeof CSS&&"function"==typeof CSS.supports?cachedSupportsTouchActionNone=CSS.supports("touch-action","none"):cachedSupportsTouchActionNone=!0),cachedSupportsTouchActionNone}const useUtilityClasses=ownerState=>{const{disabled,dragging,marked,orientation,track,classes}=ownerState;return composeClasses({root:["root",disabled&&"disabled",dragging&&"dragging",marked&&"marked","vertical"===orientation&&"vertical","inverted"===track&&"trackInverted",!1===track&&"trackFalse"],rail:["rail"],track:["track"],mark:["mark"],markActive:["markActive"],markLabel:["markLabel"],markLabelActive:["markLabelActive"],valueLabel:["valueLabel"],thumb:["thumb",disabled&&"disabled"],active:["active"],disabled:["disabled"],focusVisible:["focusVisible"]},getSliderUtilityClass,classes)},Forward=({children})=>children,SliderUnstyled=React.forwardRef(function SliderUnstyled(props,ref){const{"aria-label":ariaLabel,"aria-labelledby":ariaLabelledby,"aria-valuetext":ariaValuetext,className,component="span",classes:classesProp,defaultValue,disableSwap=!1,disabled=!1,getAriaLabel,getAriaValueText,marks:marksProp=!1,max=100,min=0,name,onChange,onChangeCommitted,onMouseDown,orientation="horizontal",scale=Identity,step=1,tabIndex,track="normal",value:valueProp,valueLabelDisplay="off",valueLabelFormat=Identity,isRtl=!1,components={},componentsProps={}}=props,other=_objectWithoutPropertiesLoose(props,_excluded),touchId=React.useRef(),[active,setActive]=React.useState(-1),[open,setOpen]=React.useState(-1),[dragging,setDragging]=React.useState(!1),moveCount=React.useRef(0),[valueDerived,setValueState]=useControlled({controlled:valueProp,default:null==defaultValue?min:defaultValue,name:"Slider"}),handleChange=onChange&&((event,value,thumbIndex)=>{const nativeEvent=event.nativeEvent||event,clonedEvent=new nativeEvent.constructor(nativeEvent.type,nativeEvent);Object.defineProperty(clonedEvent,"target",{writable:!0,value:{value,name}}),onChange(clonedEvent,value,thumbIndex)}),range=Array.isArray(valueDerived);let values=range?valueDerived.slice().sort(asc):[valueDerived];values=values.map(value=>clamp(value,min,max));const marks=!0===marksProp&&null!==step?[...Array(Math.floor((max-min)/step)+1)].map((_,index)=>({value:min+step*index})):marksProp||[],{isFocusVisibleRef,onBlur:handleBlurVisible,onFocus:handleFocusVisible,ref:focusVisibleRef}=useIsFocusVisible(),[focusVisible,setFocusVisible]=React.useState(-1),sliderRef=React.useRef(),handleFocusRef=useForkRef(focusVisibleRef,sliderRef),handleRef=useForkRef(ref,handleFocusRef),handleFocus=useEventCallback(event=>{const index=+event.currentTarget.getAttribute("data-index");handleFocusVisible(event),!0===isFocusVisibleRef.current&&setFocusVisible(index),setOpen(index)}),handleBlur=useEventCallback(event=>{handleBlurVisible(event),!1===isFocusVisibleRef.current&&setFocusVisible(-1),setOpen(-1)}),handleMouseOver=useEventCallback(event=>{const index=+event.currentTarget.getAttribute("data-index");setOpen(index)}),handleMouseLeave=useEventCallback(()=>{setOpen(-1)});useEnhancedEffect(()=>{disabled&&sliderRef.current.contains(document.activeElement)&&document.activeElement.blur()},[disabled]),disabled&&-1!==active&&setActive(-1),disabled&&-1!==focusVisible&&setFocusVisible(-1);const handleHiddenInputChange=useEventCallback(event=>{const index=+event.currentTarget.getAttribute("data-index"),value=values[index],marksValues=marks.map(mark=>mark.value),marksIndex=marksValues.indexOf(value);let newValue=event.target.valueAsNumber;if(marks&&null==step&&(newValue=newValue<value?marksValues[marksIndex-1]:marksValues[marksIndex+1]),newValue=clamp(newValue,min,max),marks&&null==step){const markValues=marks.map(mark=>mark.value),currentMarkIndex=markValues.indexOf(values[index]);newValue=newValue<values[index]?markValues[currentMarkIndex-1]:markValues[currentMarkIndex+1]}if(range){disableSwap&&(newValue=clamp(newValue,values[index-1]||-Infinity,values[index+1]||1/0));const previousValue=newValue;newValue=setValueIndex({values,newValue,index});let activeIndex=index;disableSwap||(activeIndex=newValue.indexOf(previousValue)),focusThumb({sliderRef,activeIndex})}setValueState(newValue),setFocusVisible(index),handleChange&&handleChange(event,newValue,index),onChangeCommitted&&onChangeCommitted(event,newValue)}),previousIndex=React.useRef();let axis=orientation;isRtl&&"vertical"!==orientation&&(axis+="-reverse");const getFingerNewValue=({finger,move:_move=!1,values:values2})=>{const{current:slider}=sliderRef,{width,height,bottom,left}=slider.getBoundingClientRect();let percent;percent=0===axis.indexOf("vertical")?(bottom-finger.y)/height:(finger.x-left)/width,-1!==axis.indexOf("-reverse")&&(percent=1-percent);let newValue=percentToValue(percent,min,max);if(step)newValue=roundValueToStep(newValue,step,min);else{const marksValues=marks.map(mark=>mark.value),closestIndex=findClosest(marksValues,newValue);newValue=marksValues[closestIndex]}newValue=clamp(newValue,min,max);let activeIndex=0;if(range){activeIndex=_move?previousIndex.current:findClosest(values2,newValue),disableSwap&&(newValue=clamp(newValue,values2[activeIndex-1]||-Infinity,values2[activeIndex+1]||1/0));const previousValue=newValue;newValue=setValueIndex({values:values2,newValue,index:activeIndex}),disableSwap&&_move||(activeIndex=newValue.indexOf(previousValue),previousIndex.current=activeIndex)}return{newValue,activeIndex}},handleTouchMove=useEventCallback(nativeEvent=>{const finger=trackFinger(nativeEvent,touchId);if(finger){if(moveCount.current+=1,"mousemove"===nativeEvent.type&&0===nativeEvent.buttons)return void handleTouchEnd(nativeEvent);const{newValue,activeIndex}=getFingerNewValue({finger,move:!0,values});focusThumb({sliderRef,activeIndex,setActive}),setValueState(newValue),!dragging&&moveCount.current>INTENTIONAL_DRAG_COUNT_THRESHOLD&&setDragging(!0),handleChange&&handleChange(nativeEvent,newValue,activeIndex)}}),handleTouchEnd=useEventCallback(nativeEvent=>{const finger=trackFinger(nativeEvent,touchId);if(setDragging(!1),!!finger){const{newValue}=getFingerNewValue({finger,values});setActive(-1),"touchend"===nativeEvent.type&&setOpen(-1),onChangeCommitted&&onChangeCommitted(nativeEvent,newValue),touchId.current=void 0,stopListening()}}),handleTouchStart=useEventCallback(nativeEvent=>{doesSupportTouchActionNone()||nativeEvent.preventDefault();const touch=nativeEvent.changedTouches[0];null!=touch&&(touchId.current=touch.identifier);const finger=trackFinger(nativeEvent,touchId),{newValue,activeIndex}=getFingerNewValue({finger,values});focusThumb({sliderRef,activeIndex,setActive}),setValueState(newValue),handleChange&&handleChange(nativeEvent,newValue,activeIndex),moveCount.current=0;const doc=ownerDocument(sliderRef.current);doc.addEventListener("touchmove",handleTouchMove),doc.addEventListener("touchend",handleTouchEnd)}),stopListening=React.useCallback(()=>{const doc=ownerDocument(sliderRef.current);doc.removeEventListener("mousemove",handleTouchMove),doc.removeEventListener("mouseup",handleTouchEnd),doc.removeEventListener("touchmove",handleTouchMove),doc.removeEventListener("touchend",handleTouchEnd)},[handleTouchEnd,handleTouchMove]);React.useEffect(()=>{const{current:slider}=sliderRef;return slider.addEventListener("touchstart",handleTouchStart,{passive:doesSupportTouchActionNone()}),()=>{slider.removeEventListener("touchstart",handleTouchStart,{passive:doesSupportTouchActionNone()}),stopListening()}},[stopListening,handleTouchStart]),React.useEffect(()=>{disabled&&stopListening()},[disabled,stopListening]);const handleMouseDown=useEventCallback(event=>{if(onMouseDown&&onMouseDown(event),0!==event.button)return;event.preventDefault();const finger=trackFinger(event,touchId),{newValue,activeIndex}=getFingerNewValue({finger,values});focusThumb({sliderRef,activeIndex,setActive}),setValueState(newValue),handleChange&&handleChange(event,newValue,activeIndex),moveCount.current=0;const doc=ownerDocument(sliderRef.current);doc.addEventListener("mousemove",handleTouchMove),doc.addEventListener("mouseup",handleTouchEnd)}),trackOffset=valueToPercent(range?values[0]:min,min,max),trackLeap=valueToPercent(values[values.length-1],min,max)-trackOffset,trackStyle=_extends({},axisProps[axis].offset(trackOffset),axisProps[axis].leap(trackLeap)),Root=components.Root||component,rootProps=componentsProps.root||{},Rail=components.Rail||"span",railProps=componentsProps.rail||{},Track=components.Track||"span",trackProps=componentsProps.track||{},Thumb=components.Thumb||"span",thumbProps=componentsProps.thumb||{},ValueLabel=components.ValueLabel||SliderValueLabelUnstyled,valueLabelProps=componentsProps.valueLabel||{},Mark=components.Mark||"span",markProps=componentsProps.mark||{},MarkLabel=components.MarkLabel||"span",markLabelProps=componentsProps.markLabel||{},ownerState=_extends({},props,{classes:classesProp,disabled,dragging,isRtl,marked:0<marks.length&&marks.some(mark=>mark.label),max,min,orientation,scale,step,track,valueLabelDisplay,valueLabelFormat}),classes=useUtilityClasses(ownerState);return _jsxs(Root,_extends({ref:handleRef,onMouseDown:handleMouseDown},rootProps,!isHostComponent(Root)&&{as:component,ownerState:_extends({},ownerState,rootProps.ownerState)},other,{className:clsx(classes.root,rootProps.className,className),children:[_jsx(Rail,_extends({},railProps,!isHostComponent(Rail)&&{ownerState:_extends({},ownerState,railProps.ownerState)},{className:clsx(classes.rail,railProps.className)})),_jsx(Track,_extends({},trackProps,!isHostComponent(Track)&&{ownerState:_extends({},ownerState,trackProps.ownerState)},{className:clsx(classes.track,trackProps.className),style:_extends({},trackStyle,trackProps.style)})),marks.map((mark,index)=>{const percent=valueToPercent(mark.value,min,max),style=axisProps[axis].offset(percent);let markActive;return markActive=!1===track?-1!==values.indexOf(mark.value):"normal"===track&&(range?mark.value>=values[0]&&mark.value<=values[values.length-1]:mark.value<=values[0])||"inverted"===track&&(range?mark.value<=values[0]||mark.value>=values[values.length-1]:mark.value>=values[0]),_jsxs(React.Fragment,{children:[_jsx(Mark,_extends({"data-index":index},markProps,!isHostComponent(Mark)&&{ownerState:_extends({},ownerState,markProps.ownerState),markActive},{style:_extends({},style,markProps.style),className:clsx(classes.mark,markProps.className,markActive&&classes.markActive)})),null==mark.label?null:_jsx(MarkLabel,_extends({"aria-hidden":!0,"data-index":index},markLabelProps,!isHostComponent(MarkLabel)&&{ownerState:_extends({},ownerState,markLabelProps.ownerState)},{markLabelActive:markActive,style:_extends({},style,markLabelProps.style),className:clsx(classes.markLabel,markLabelProps.className,markActive&&classes.markLabelActive),children:mark.label}))]},mark.value)}),values.map((value,index)=>{const percent=valueToPercent(value,min,max),style=axisProps[axis].offset(percent),ValueLabelComponent="off"===valueLabelDisplay?Forward:ValueLabel;return _jsx(React.Fragment,{children:_jsx(ValueLabelComponent,_extends({valueLabelFormat:valueLabelFormat,valueLabelDisplay:valueLabelDisplay,value:"function"==typeof valueLabelFormat?valueLabelFormat(scale(value),index):valueLabelFormat,index:index,open:open===index||active===index||"on"===valueLabelDisplay,disabled:disabled},valueLabelProps,{className:clsx(classes.valueLabel,valueLabelProps.className)},!isHostComponent(ValueLabel)&&{ownerState:_extends({},ownerState,valueLabelProps.ownerState)},{children:_jsx(Thumb,_extends({"data-index":index,onMouseOver:handleMouseOver,onMouseLeave:handleMouseLeave},thumbProps,{className:clsx(classes.thumb,thumbProps.className,active===index&&classes.active,focusVisible===index&&classes.focusVisible)},!isHostComponent(Thumb)&&{ownerState:_extends({},ownerState,thumbProps.ownerState)},{style:_extends({},style,{pointerEvents:disableSwap&&active!==index?"none":void 0},thumbProps.style),children:_jsx("input",{tabIndex:tabIndex,"data-index":index,"aria-label":getAriaLabel?getAriaLabel(index):ariaLabel,"aria-labelledby":ariaLabelledby,"aria-orientation":orientation,"aria-valuemax":scale(max),"aria-valuemin":scale(min),"aria-valuenow":scale(value),"aria-valuetext":getAriaValueText?getAriaValueText(scale(value),index):ariaValuetext,onFocus:handleFocus,onBlur:handleBlur,name:name,type:"range",min:props.min,max:props.max,step:props.step,disabled:disabled,value:values[index],onChange:handleHiddenInputChange,style:_extends({},visuallyHidden,{direction:isRtl?"rtl":"ltr",width:"100%",height:"100%"})})}))}))},index)})]}))});void 0;export default SliderUnstyled;