import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import React from"c:\\node_modules\\react\\index.js";import{unstable_useControlled as useControlled,unstable_useEventCallback as useEventCallback,unstable_useForkRef as useForkRef,unstable_useIsFocusVisible as useIsFocusVisible}from"c:\\node_modules\\@mui\\utils\\esm\\index.js";export default function useSwitch(props){const{checked:checkedProp,defaultChecked,disabled,onBlur,onChange,onFocus,onFocusVisible,readOnly,required}=props,[checked,setCheckedState]=useControlled({controlled:checkedProp,default:!!defaultChecked,name:"Switch",state:"checked"}),handleInputChange=useEventCallback((event,otherHandler)=>{event.nativeEvent.defaultPrevented||(setCheckedState(event.target.checked),null==onChange?void 0:onChange(event),null==otherHandler?void 0:otherHandler(event))}),{isFocusVisibleRef,onBlur:handleBlurVisible,onFocus:handleFocusVisible,ref:focusVisibleRef}=useIsFocusVisible(),[focusVisible,setFocusVisible]=React.useState(!1);disabled&&focusVisible&&setFocusVisible(!1),React.useEffect(()=>{isFocusVisibleRef.current=focusVisible},[focusVisible,isFocusVisibleRef]);const inputRef=React.useRef(null),handleFocus=useEventCallback((event,otherHandler)=>{inputRef.current||(inputRef.current=event.currentTarget),handleFocusVisible(event),!0===isFocusVisibleRef.current&&(setFocusVisible(!0),null==onFocusVisible?void 0:onFocusVisible(event)),null==onFocus?void 0:onFocus(event),null==otherHandler?void 0:otherHandler(event)}),handleBlur=useEventCallback((event,otherHandler)=>{handleBlurVisible(event),!1===isFocusVisibleRef.current&&setFocusVisible(!1),null==onBlur?void 0:onBlur(event),null==otherHandler?void 0:otherHandler(event)}),handleRefChange=useForkRef(focusVisibleRef,inputRef);return{checked,disabled:!!disabled,focusVisible,getInputProps:(otherProps={})=>_extends({checked:checkedProp,defaultChecked,disabled,readOnly,required,type:"checkbox"},otherProps,{onChange:event=>handleInputChange(event,otherProps.onChange),onFocus:event=>handleFocus(event,otherProps.onFocus),onBlur:event=>handleBlur(event,otherProps.onBlur),ref:handleRefChange}),readOnly:!!readOnly}}