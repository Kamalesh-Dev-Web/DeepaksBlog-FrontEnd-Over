import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";import _extends from"/node_modules/@babel/runtime/helpers/esm/extends.js";import{formatMuiErrorMessage as _formatMuiErrorMessage}from"c:\\node_modules\\@mui\\utils\\esm\\index.js";import React from"c:\\node_modules\\react\\index.js";import{unstable_useForkRef as useForkRef}from"c:\\node_modules\\@mui\\utils\\esm\\index.js";import useFormControl from"/node_modules/@mui/core/FormControlUnstyled/useFormControl.js";import extractEventHandlers from"/node_modules/@mui/core/utils/extractEventHandlers.js";export default function useInput(props,inputRef){const{defaultValue,disabled:disabledProp=!1,error:errorProp=!1,onBlur,onChange,onFocus,required:requiredProp=!1,value:valueProp}=props,formControlContext=useFormControl();let value,required,disabled,error;if(formControlContext){var _formControlContext$d,_formControlContext$r,_formControlContext$e;value=formControlContext.value,disabled=null!=(_formControlContext$d=formControlContext.disabled)&&_formControlContext$d,required=null!=(_formControlContext$r=formControlContext.required)&&_formControlContext$r,error=null!=(_formControlContext$e=formControlContext.error)&&_formControlContext$e}else value=valueProp,disabled=disabledProp,required=requiredProp,error=errorProp;const{current:isControlled}=React.useRef(null!=value),handleInputRefWarning=React.useCallback(instance=>{},[]),internalInputRef=React.useRef(null),handleIncomingRef=useForkRef(inputRef,handleInputRefWarning),handleInputRef=useForkRef(internalInputRef,handleIncomingRef),[focused,setFocused]=React.useState(!1);React.useEffect(()=>{!formControlContext&&disabled&&focused&&(setFocused(!1),null==onBlur?void 0:onBlur())},[formControlContext,disabled,focused,onBlur]);const handleFocus=otherHandlers=>event=>{var _otherHandlers$onFocu;if(null!=formControlContext&&formControlContext.disabled)return void event.stopPropagation();if(null==(_otherHandlers$onFocu=otherHandlers.onFocus)?void 0:_otherHandlers$onFocu.call(otherHandlers,event),formControlContext&&formControlContext.onFocus){var _formControlContext$o;null==formControlContext||null==(_formControlContext$o=formControlContext.onFocus)?void 0:_formControlContext$o.call(formControlContext)}else setFocused(!0)},handleBlur=otherHandlers=>event=>{var _otherHandlers$onBlur;null==(_otherHandlers$onBlur=otherHandlers.onBlur)?void 0:_otherHandlers$onBlur.call(otherHandlers,event),formControlContext&&formControlContext.onBlur?formControlContext.onBlur():setFocused(!1)},handleChange=otherHandlers=>(event,...args)=>{var _formControlContext$o2,_otherHandlers$onChan;if(!isControlled){const element=event.target||internalInputRef.current;if(null==element)throw new Error(_formatMuiErrorMessage(17))}null==formControlContext||null==(_formControlContext$o2=formControlContext.onChange)?void 0:_formControlContext$o2.call(formControlContext,event),null==(_otherHandlers$onChan=otherHandlers.onChange)?void 0:_otherHandlers$onChan.call(otherHandlers,event,...args)},handleClick=otherHandlers=>event=>{var _otherHandlers$onClic;internalInputRef.current&&event.currentTarget===event.target&&internalInputRef.current.focus(),null==(_otherHandlers$onClic=otherHandlers.onClick)?void 0:_otherHandlers$onClic.call(otherHandlers,event)},getInputProps=externalProps=>{const externalEventHandlers=_extends({},{onBlur,onChange,onFocus},extractEventHandlers(externalProps)),mergedEventHandlers=_extends({},externalProps,externalEventHandlers,{onBlur:handleBlur(externalEventHandlers),onChange:handleChange(externalEventHandlers),onFocus:handleFocus(externalEventHandlers)});return _extends({},mergedEventHandlers,{"aria-invalid":error||void 0,defaultValue:defaultValue,ref:handleInputRef,value:value,required,disabled})};return{disabled,error,focused,formControlContext,getInputProps,getRootProps:externalProps=>{const propsEventHandlers=extractEventHandlers(props,["onBlur","onChange","onFocus"]),externalEventHandlers=_extends({},propsEventHandlers,extractEventHandlers(externalProps));return _extends({},externalProps,externalEventHandlers,{onClick:handleClick(externalEventHandlers)})},required,value}}