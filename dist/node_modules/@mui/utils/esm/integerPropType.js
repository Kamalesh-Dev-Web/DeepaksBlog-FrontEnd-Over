import"/node_modules/core-js/modules/es.array.iterator.js";import"/node_modules/core-js/modules/web.dom-collections.iterator.js";export function getTypeByValue(value){const valueType=typeof value;return"number"==valueType?Number.isNaN(value)?"NaN":Number.isFinite(value)?value===Math.floor(value)?"number":"float":"Infinity":"object"===valueType?null===value?"null":value.constructor.name:valueType}function ponyfillIsInteger(x){return"number"==typeof x&&isFinite(x)&&Math.floor(x)===x}const isInteger=Number.isInteger||ponyfillIsInteger;function requiredInteger(props,propName,componentName,location){const propValue=props[propName];if(null==propValue||!isInteger(propValue)){const propType=getTypeByValue(propValue);return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`)}return null}function validator(props,propName,...other){const propValue=props[propName];return void 0===propValue?null:requiredInteger(props,propName,...other)}function validatorNoop(){return null}validator.isRequired=requiredInteger,validatorNoop.isRequired=validatorNoop;export default validatorNoop;