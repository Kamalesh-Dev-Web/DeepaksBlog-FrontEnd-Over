import{getBatch}from"/node_modules/react-redux/es/utils/batch.js";var nullListeners={notify:function notify(){}};function createListenerCollection(){var batch=getBatch(),first=null,last=null;return{clear:function clear(){first=null,last=null},notify:function notify(){batch(function(){for(var listener=first;listener;)listener.callback(),listener=listener.next})},get:function get(){for(var listeners=[],listener=first;listener;)listeners.push(listener),listener=listener.next;return listeners},subscribe:function subscribe(callback){var isSubscribed=!0,listener=last={callback:callback,next:null,prev:last};return listener.prev?listener.prev.next=listener:first=listener,function unsubscribe(){isSubscribed&&null!==first&&(isSubscribed=!1,listener.next?listener.next.prev=listener.prev:last=listener.prev,listener.prev?listener.prev.next=listener.next:first=listener.next)}}}}var Subscription=function(){function Subscription(store,parentSub){this.store=store,this.parentSub=parentSub,this.unsubscribe=null,this.listeners=nullListeners,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var _proto=Subscription.prototype;return _proto.addNestedSub=function addNestedSub(listener){return this.trySubscribe(),this.listeners.subscribe(listener)},_proto.notifyNestedSubs=function notifyNestedSubs(){this.listeners.notify()},_proto.handleChangeWrapper=function handleChangeWrapper(){this.onStateChange&&this.onStateChange()},_proto.isSubscribed=function isSubscribed(){return!!this.unsubscribe},_proto.trySubscribe=function trySubscribe(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=createListenerCollection())},_proto.tryUnsubscribe=function tryUnsubscribe(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=nullListeners)},Subscription}();export{Subscription as default};